import streamlit as st
from src.data_loader import load_data, DataLoaderError
from src.pk_workflow import compute_pk_and_stats
from src.plot_utils import (confidence_interval_plot, individual_profile, mean_curves, mean_sd_plot, all_profiles, radar_plot, studentized_residuals_plot, studentized_group_plot)
from src.export_utils import export_be_tables, export_be_result, export_power_table
import pandas as pd
import numpy as np
import io
from stat_tools import (
    ci_calc,
    calc_swr,
    get_cv_intra_anova,
    compute_vitals_iqr,
    compute_group_iqr,
    make_stat_report_table
)
from blood_analysis import (
    load_oak_sheet,
    load_vitals_sheet,
    plot_oak_pairwise,
    plot_all_oak_parameters,
    vitals_params,
    load_vitals_sheet,
    load_stage_order
)
from docx import Document
import matplotlib.pyplot as plt
from scipy.stats import gmean

st.set_page_config(page_title="–ë–∏–æ—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å", layout="wide")
st.title("üìä –†–∞—Å—á—ë—Ç –±–∏–æ—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏")

st.sidebar.subheader("üíä –í–≤–æ–¥ –¥–æ–∑—ã –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞")
dose_test = st.sidebar.number_input("–î–æ–∑–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ (–º–≥)", min_value=0.0, value=100.0, step=1.0)
dose_ref = st.sidebar.number_input("–î–æ–∑–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ (–º–≥)", min_value=0.0, value=100.0, step=1.0)


st.sidebar.header("üîç –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
test_name = st.sidebar.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞", "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–ø–∞—Ä–∞—Ç")
ref_name = st.sidebar.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Ç–Ω–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞", "–†–µ—Ñ–µ—Ä–µ–Ω—Ç–Ω—ã–π –ø—Ä–µ–ø–∞—Ä–∞—Ç")
substance = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
rand_file = st.sidebar.file_uploader("–§–∞–π–ª —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏", type="csv")
time_file = st.sidebar.file_uploader("–§–∞–π–ª —Ç–æ—á–µ–∫", type="csv")
xlsx_files = st.sidebar.file_uploader("–§–∞–π–ª—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", type="xlsx", accept_multiple_files=True)
st.sidebar.subheader("üìÑ –î–∞–Ω–Ω—ã–µ –¥–æ–±—Ä–æ–≤–æ–ª—å—Ü–µ–≤")
subject_file = st.sidebar.file_uploader("–§–∞–π–ª —Å –∞–Ω–∫–µ—Ç–∞–º–∏ / –∞–Ω–∞–ª–∏–∑–∞–º–∏", type=["xlsx", "xlsm"])



st.sidebar.subheader("üì¶ –í—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü –¥–ª—è –æ—Ç—á—ë—Ç–∞")

available_tables = [
    "üìë GMR / CI / CV —Ç–∞–±–ª–∏—Ü–∞",
    "üìä ANOVA –ø–æ Cmax",
    "üìä ANOVA –ø–æ AUC‚ÇÄ‚Äìt",
    "üìä ANOVA –ø–æ AUC‚ÇÄ‚Äì‚àû",
    "üìã –¢–∞–±–ª–∏—Ü–∞ PK –ø–æ –¥–æ–±—Ä–æ–≤–æ–ª—å—Ü–∞–º",
    "üìà –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏",
    "üìä –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–µ–µ ¬± 2√óSD",
    "üìä –ì—Ä–∞—Ñ–∏–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (Test)",
    "üìä –ì—Ä–∞—Ñ–∏–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (Ref)",
    "üìë –û–±–æ–±—â—ë–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –§–ö-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
    "üìë –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏–∫–∏",
    "üìÑ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è PK (Test + Ref)",
    "üìÑ –û—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø–ª–æ—â–∞–¥—å AUC (Test + Ref)",
    "üìÑ ln(PK) –∑–Ω–∞—á–µ–Ω–∏—è: Test + Ref",
    "üìÑ ANOVA –ª–æ–≥-–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ (SAS-–æ—Ç—á—ë—Ç)",
    "üìë –û—Å—Ç–∞—Ç–æ—á–Ω–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è –∏ CI –ª–æ–≥-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
    "üìä –¢–∞–±–ª–∏—Ü–∞: –ö—Ä–∏—Ç–µ—Ä–∏–∏ –±–∏–æ—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏ (GMR, CI, CV)",
    "üìä –¢–∞–±–ª–∏—Ü–∞: –ê–Ω–∞–ª–∏–∑ –∞–ø–æ—Å—Ç–µ—Ä–∏–æ—Ä–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏ (Power)"



]

selected_table = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É", available_tables)

selected_outlier_plot = st.sidebar.selectbox(
    "üìâ –†–µ–∑–∫–æ –≤—ã–¥–µ–ª—è—é—â–∏–µ—Å—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è",
    [
        "‚Äì",
        "studentized residuals: ln(Cmax_T)",
        "studentized residuals: ln(Cmax_R)",
        "studentized residuals: ln(AUC‚ÇÄ‚Äìt_T)",
        "studentized residuals: ln(AUC‚ÇÄ‚Äìt_R)",
        "studentized residuals: ln(AUC‚ÇÄ‚Äì‚àû_T)",
        "studentized residuals: ln(AUC‚ÇÄ‚Äì‚àû_R)",
        "studentized residuals: ln(Cmax_T) ‚Äì ln(Cmax_R)",
        "studentized residuals: ln(AUC‚ÇÄ‚Äìt_T) ‚Äì ln(AUC‚ÇÄ‚Äìt_R)",
        "studentized residuals: ln(AUC‚ÇÄ‚Äì‚àû_T) ‚Äì ln(AUC‚ÇÄ‚Äì‚àû_R)"
    ]
)

st.sidebar.header("ü©∏ –ê–Ω–∞–ª–∏–∑ –ù–Ø")
enable_safety = st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
st.sidebar.header("üß™ –ê–Ω–∞–ª–∏–∑ –ë–•–ê–ö")
enable_bio = st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –±–∏–æ—Ö–∏–º–∏–∏ –∫—Ä–æ–≤–∏")

st.sidebar.header("üßª –ê–Ω–∞–ª–∏–∑ –û–ê–ú")
enable_oam = st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –º–æ—á–∏")




if enable_safety:
    oak_params = {
        "–ì–µ–º–æ–≥–ª–æ–±–∏–Ω, –≥/–ª": ("–ì–µ–º–æ–≥–ª–æ–±–∏–Ω", "–≥/–ª"),
        "–ì–µ–º–∞—Ç–æ–∫—Ä–∏—Ç, %": ("–ì–µ–º–∞—Ç–æ–∫—Ä–∏—Ç", "%"),
        "–≠—Ä–∏—Ç—Ä–æ—Ü–∏—Ç—ã, 10¬π¬≤/–ª": ("–≠—Ä–∏—Ç—Ä–æ—Ü–∏—Ç—ã", "10¬π¬≤/–ª"),
        "–õ–µ–π–∫–æ—Ü–∏—Ç—ã, 10‚Åπ/–ª": ("–õ–µ–π–∫–æ—Ü–∏—Ç—ã", "10‚Åπ/–ª"),
        "–°–µ–≥–º–µ–Ω—Ç–æ—è–¥–µ—Ä–Ω—ã–µ –Ω–µ–π—Ç—Ä–æ—Ñ–∏–ª—ã, %": ("–°–µ–≥–º–µ–Ω—Ç–æ—è–¥–µ—Ä–Ω—ã–µ –Ω–µ–π—Ç—Ä–æ—Ñ–∏–ª—ã", "%"),
        "–ü–∞–ª–æ—á–∫–æ—è–¥–µ—Ä–Ω—ã–µ –Ω–µ–π—Ç—Ä–æ—Ñ–∏–ª—ã, %": ("–ü–∞–ª–æ—á–∫–æ—è–¥–µ—Ä–Ω—ã–µ –Ω–µ–π—Ç—Ä–æ—Ñ–∏–ª—ã", "%"),
        "–õ–∏–º—Ñ–æ—Ü–∏—Ç—ã, %": ("–õ–∏–º—Ñ–æ—Ü–∏—Ç—ã", "%"),
        "–ë–∞–∑–æ—Ñ–∏–ª—ã, %": ("–ë–∞–∑–æ—Ñ–∏–ª—ã", "%"),
        "–ú–æ–Ω–æ—Ü–∏—Ç—ã, %": ("–ú–æ–Ω–æ—Ü–∏—Ç—ã", "%"),
        "–≠–æ–∑–∏–Ω–æ—Ñ–∏–ª—ã, %": ("–≠–æ–∑–∏–Ω–æ—Ñ–∏–ª—ã", "%"),
        "–¢—Ä–æ–º–±–æ—Ü–∏—Ç—ã, 10‚Åπ/–ª": ("–¢—Ä–æ–º–±–æ—Ü–∏—Ç—ã", "10‚Åπ/–ª"),
        "–°–û–≠, –º–º/—á": ("–°–û–≠", "–º–º/—á")
    }

    #selected_param = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä (–û–ê–ö)", list(oak_params.keys()))



if rand_file and time_file and xlsx_files:
    try:
        df, rand_dict, time_dict = load_data(rand_file, time_file, xlsx_files)
    except DataLoaderError as e:
        st.error(str(e))
        st.stop()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:\n{e}")
        st.stop()

    st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–π: {len(df)}")
    st.dataframe(df.head())

    try:
        pk_table, pivot, stats = compute_pk_and_stats(df, dose_test=dose_test, dose_ref=dose_ref)
    except Exception as e:
        st.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ PK:\n{e}")
        st.stop()

    st.subheader("üìã PK-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    st.dataframe(pk_table)

    gmr_auc, gmr_aucinf, gmr_cmax = stats["gmr"]
    ci_l_auc, ci_l_aucinf, ci_l_cmax = stats["ci_low"]
    ci_u_auc, ci_u_aucinf, ci_u_cmax = stats["ci_up"]
    cv_auc, cv_aucinf, cv_cmax = stats["cv"]
    anova_cmax = stats["anova"]["cmax"]
    anova_auc = stats["anova"]["auc"]
    anova_aucinf = stats["anova"]["aucinf"]
    sWR_cmax, sWR_auc, sWR_aucinf = stats["swr"]
    outlier = stats["outlier"]
    recs = stats["recs"]


    # === –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∏–æ—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏ ===
    st.subheader("üìã 2. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞")

    result_df = pd.DataFrame({
        "Parameter": ["Cmax", "AUC0-t", "AUC0-inf"],
        "Ratio (%)": [gmr_cmax * 100, gmr_auc * 100, gmr_aucinf * 100],
        "CI Lower (%)": [ci_l_cmax * 100, ci_l_auc * 100, ci_l_aucinf * 100],
        "CI Upper (%)": [ci_u_cmax * 100, ci_u_auc * 100, ci_u_aucinf * 100],
    })

    result_df["Bioequivalent"] = result_df.apply(
        lambda row: 80 <= row["CI Lower (%)"] <= row["CI Upper (%)"] <= 125,
        axis=1
    )

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –≥–∞–ª–æ—á–∫–∞–º–∏
    st.dataframe(result_df.style.format({
        "Ratio (%)": "{:.2f}",
        "CI Lower (%)": "{:.2f}",
        "CI Upper (%)": "{:.2f}"
    }))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–æ—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ Cmax –∏, –ø—Ä–∏ –µ—ë –Ω–∞—Ä—É—à–µ–Ω–∏–∏,
    # –≤—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è

    if outlier is not None:
        st.warning(f"‚ö†Ô∏è –ë–∏–æ—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ Cmax –ù–ï —Å–æ–±–ª—é–¥–µ–Ω–∞. –û—Å–Ω–æ–≤–Ω–æ–π ¬´–≤–∏–Ω–æ–≤–Ω–∏–∫¬ª ‚Äî –¥–æ–±—Ä–æ–≤–æ–ª–µ—Ü {outlier}.")
        st.write("–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å—É–±—ä–µ–∫—Ç–∞ (–≤–º–µ—Å—Ç–æ –µ–≥–æ –∫—Ä–∏–≤–æ–π ‚Äî —Å—Ä–µ–¥–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö):")
        st.dataframe(recs.round(2))
    else:
        st.success("‚úÖ Cmax —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º –±–∏–æ—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏.")
    # === –ö–û–ù–ï–¶ –í–°–¢–ê–í–ö–ò ===


    st.subheader("üìà GMR –∏ 90% CI")
    st.write(f"Cmax: {gmr_cmax*100:.2f}% [{ci_l_cmax*100:.2f}% ‚Äì {ci_u_cmax*100:.2f}%]")
    st.write(f"AUC‚ÇÄ‚Äìt: {gmr_auc*100:.2f}% [{ci_l_auc*100:.2f}% ‚Äì {ci_u_auc*100:.2f}%]")

    # ANOVA
    st.subheader("üìä ANOVA (–ª–æ–≥-–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)")
    anova_cmax = stats["anova"]["cmax"]
    anova_auc = stats["anova"]["auc"]
    anova_aucinf = stats["anova"]["aucinf"]

    st.write("**Cmax**")
    _, result_cmax, _, _ = anova_cmax
    st.dataframe(result_cmax.round(4))
    st.write("**AUC‚ÇÄ‚Äìt**")
    _, result_auc, _, _ = anova_auc
    st.dataframe(result_auc.round(4))
    st.write("**AUC‚ÇÄ‚Äì‚àû**")
    _, result_aucinf, _, _ = anova_aucinf
    st.dataframe(result_aucinf.round(4))

    # sWR –∏ –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å
    sWR_cmax, cv_cmax = calc_swr(np.log(pivot["Cmax_Ref"]))
    sWR_auc, cv_auc = calc_swr(np.log(pivot["AUC0-t_Ref"]))
    sWR_aucinf, cv_aucinf = calc_swr(np.log(pivot["AUC0-inf_Ref"]))

    # CV_intra –ø–æ ICH
    cv_cmax = get_cv_intra_anova(pk_table, "Cmax")
    cv_auc = get_cv_intra_anova(pk_table.rename(columns={"AUC0-t": "AUC0t"}), "AUC0t")
    cv_aucinf = get_cv_intra_anova(pk_table.rename(columns={"AUC0-inf": "AUC0inf"}), "AUC0inf")

    # –°–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏–π
    gmr_list = [gmr_auc, gmr_aucinf, gmr_cmax]
    ci_low_list = [ci_l_auc, ci_l_aucinf, ci_l_cmax]
    ci_up_list = [ci_u_auc, ci_u_aucinf, ci_u_cmax]
    cv_list = [cv_auc, cv_aucinf, cv_cmax]
    # ‚Äî‚Äî‚Äî –ë–ª–æ–∫ ¬´–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–ª—é—á–µ–Ω–∏–µ¬ª ‚Äî‚Äî‚Äî
    if st.button("üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–ª—é—á–µ–Ω–∏–µ"):
        # 1) % —Å–ª—É—á–∞–µ–≤, –≥–¥–µ AUC(0‚Äìt)/AUC(0‚Äì‚àû) ‚â• 0.8
        auc_ratio = pk_table["AUC0-t"] / pk_table["AUC0-inf"]
        pct_suff = (auc_ratio >= 0.8).mean() * 100

        # 2) 5% –æ—Ç Cmax –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–±—Ä–æ–≤–æ–ª—å—Ü–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ LLOQ=1
        perc5_cmax = 0.05 * pk_table["Cmax"]
        below_lloq = (perc5_cmax < 1).sum()
        min5, max5 = perc5_cmax.min(), perc5_cmax.max()

        # 3) —Å—É–±—ä–µ–∫—Ç—ã —Å ¬´–Ω–∏–∑–∫–∏–º–∏¬ª AUC —Ä–µ—Ñ–µ—Ä–µ–Ω—Ç–∞
        ref_auc = pk_table.loc[pk_table["Treatment"] == "Ref", "AUC0-t"]
        gm_ref_auc = gmean(ref_auc)
        threshold = 0.05 * gm_ref_auc
        low_count = (pk_table["AUC0-t"] <= threshold).sum()

        # 4) –ø–µ—Ä–∏–æ–¥ –æ—Ç–º—ã–≤–∫–∏ (7 —Å—É—Ç = 168 —á) –≤ –ø–æ–ª—É–ø–µ—Ä–∏–æ–¥–∞—Ö
        half_lives = 168 / pk_table["T1/2"]
        hr_min, hr_max = half_lives.min(), half_lives.max()

        # –°–æ–±–∏—Ä–∞–µ–º —Ç–∞–±–ª–∏—á–∫—É
        summary = pd.DataFrame({
            "–ü—É–Ω–∫—Ç": [
                "1. AUC(0‚Äìt) ‚â• 80%¬∑AUC(0‚Äì‚àû)",
                "2. 5% –æ—Ç Cmax",
                "3. –°—É–±—ä–µ–∫—Ç—ã —Å AUC‚ÇÄ‚Äìt ‚â§ 5% GM AUC‚ÇçRef‚Çé",
                "4. –ü–µ—Ä–∏–æ–¥ –æ—Ç–º—ã–≤–∫–∏ (168 —á)"
            ],
            "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                f"{pct_suff:.1f}% —Å–ª—É—á–∞–µ–≤",
                f"–¥–æ–±—Ä–æ–≤–æ–ª—å—Ü–µ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö 5% –æ—Ç Cmax –Ω–∏–∂–µ LLOQ=1 –Ω–≥/–º–ª, –Ω–µ –±—ã–ª–æ; "
                f"–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è 5% Cmax –≤–∞—Ä—å–∏—Ä–æ–≤–∞–ª–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {min5:.2f}‚Äì{max5:.2f} –Ω–≥/–º–ª",
                f"{low_count} —Å—É–±—ä–µ–∫—Ç–æ–≤ (–ø–æ—Ä–æ–≥ {threshold:.2f} –Ω–≥¬∑—á/–º–ª)",
                f"{hr_min:.1f}‚Äì{hr_max:.1f} ¬∑ t‚ÇÅ/‚ÇÇ"
            ]
        })

        st.markdown("### üìë –ö—Ä–∞—Ç–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ")
        st.table(summary)

    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å—Ç–∞—Ç–æ—Ç—á—ë—Ç–∞
    st.subheader("üìë –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á—ë—Ç–∞")
    report_df = make_stat_report_table(gmr_list, ci_low_list, ci_up_list, cv_list)
    st.dataframe(report_df)


    st.subheader("üìâ –í–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å")
    st.write(f"Cmax ‚Üí sWR = {sWR_cmax:.4f}, CV = {cv_cmax:.2f}%")
    st.write(f"AUC‚ÇÄ‚Äìt ‚Üí sWR = {sWR_auc:.4f}, CV = {cv_auc:.2f}%")

    # –ì—Ä–∞—Ñ–∏–∫–∏
    st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤")
    try:
        fig_ci = confidence_interval_plot(
            gmr_cmax,
            gmr_auc,
            ci_l_cmax,
            ci_l_auc,
            ci_u_cmax,
            ci_u_auc,
        )
        st.pyplot(fig_ci)
        plt.close(fig_ci)
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤:\n{e}")
        st.stop()

    st.subheader("üìâ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫—Ä–∏–≤—ã–µ")
    subj = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–±—Ä–æ–≤–æ–ª—å—Ü–∞", sorted(df["Subject"].unique()))
    st.pyplot(individual_profile(df, subj, test_name, ref_name))
    st.subheader("üìâ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –∫—Ä–∏–≤–∞—è (–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞)")
    st.pyplot(individual_profile(df, subj, test_name, ref_name, log=True))
    #st.subheader("üìâ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –∫—Ä–∏–≤–∞—è (–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞)")
    #st.pyplot(plot_individual_log(df, subj, test_name, ref_name))

    st.subheader("üìà –°—Ä–µ–¥–Ω–∏–µ –∫—Ä–∏–≤—ã–µ (–ª–∏–Ω–µ–π–Ω–∞—è —à–∫–∞–ª–∞)")
    mean_df = df.groupby(["Treatment", "Time"])["Concentration"].mean().reset_index()
    st.pyplot(mean_curves(mean_df, test_name, ref_name))


    st.subheader("üìà –°—Ä–µ–¥–Ω–∏–µ –∫—Ä–∏–≤—ã–µ (–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞)")
    st.pyplot(mean_curves(mean_df, test_name, ref_name, log=True))

    st.subheader("üìä –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–ø–∞—Ä–∞—Ç: —Å—Ä–µ–¥–Ω–µ–µ ¬± 2√óSD")
    fig_test = mean_sd_plot(df, label="Test", title=test_name)
    st.pyplot(fig_test)

    st.subheader("üìä –†–µ—Ñ–µ—Ä–µ–Ω—Ç–Ω—ã–π –ø—Ä–µ–ø–∞—Ä–∞—Ç: —Å—Ä–µ–¥–Ω–µ–µ ¬± 2√óSD")
    fig_ref = mean_sd_plot(df, label="Ref", title=ref_name)
    st.pyplot(fig_ref)

    st.subheader("üìà –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ ‚Äì –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–ø–∞—Ä–∞—Ç")
    fig_test_ind = all_profiles(df, "Test", f"–¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –ø—Ä–µ–ø–∞—Ä–∞—Ç ‚Äì {test_name}")
    st.pyplot(fig_test_ind)

    st.subheader("üìà –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ ‚Äì –†–µ—Ñ–µ—Ä–µ–Ω—Ç–Ω—ã–π –ø—Ä–µ–ø–∞—Ä–∞—Ç")
    fig_ref_ind = all_profiles(df, "Ref", f"–ü—Ä–µ–ø–∞—Ä–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ‚Äì {ref_name}")
    st.pyplot(fig_ref_ind)


    # –ù–∞–π—Ç–∏ Excel —Å –ª–∏—Å—Ç–æ–º "–û–ê–ö"
    if enable_safety and subject_file:
        # 1) –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        oak_df = load_oak_sheet(subject_file)
        #st.write("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –û–ê–ö:", oak_df.columns.tolist()[2:])  # –ø–µ—Ä–≤—ã–µ –¥–≤–∞ ‚Äî ‚Ññ –∏ —ç—Ç–∞–ø

        # 2) –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        selected_param = st.sidebar.selectbox(
            "–ü–∞—Ä–∞–º–µ—Ç—Ä (–û–ê–ö)",
            list(oak_params.keys())
        )

        # 3) –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —á–µ–∫-–±–æ–∫—Å: –î–∏–Ω–∞–º–∏–∫–∞ —Å —É—Å–∞–º–∏ (IQR)
        if st.checkbox("üß∑ –î–∏–Ω–∞–º–∏–∫–∞ —Å —É—Å–∞–º–∏ (IQR)", key="iqr_dyn"):


            iqr_df = compute_group_iqr(oak_df, selected_param)
            if iqr_df.empty:
                st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è IQR")
            else:
                fig = plot_group_iqr(
                    iqr_df,
                    param_name=selected_param,
                    units=oak_params[selected_param][1]
                )
                st.pyplot(fig)
                plt.close(fig)

            # 3) –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –û–ê–ö (–ø–∞—Ä–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
            if st.checkbox("üìä –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –û–ê–ö"):
                for title, fig in plot_all_oak_parameters(oak_df, oak_params):
                    st.subheader(title)
                    st.pyplot(fig)
                    plt.close(fig)
    st.markdown("### üìà –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ –∫—Ä–æ–≤–∏")
    # üìà –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–û–ê–ö)
    if st.checkbox("üìà –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–û–ê–ö)", key="oak_individual"):
        for param, (title, unit) in oak_params.items():
            fig = plot_individual_changes(
                oak_df,
                param,
                title=title,
                units=unit
            )
            st.markdown(f"#### {title}, {unit}")
            st.pyplot(fig)
            plt.close(fig)


    if enable_bio and subject_file:
        from blood_analysis import load_bhak_sheet
        from stat_tools import compute_group_iqr
        from viz import plot_group_iqr

        # 1) –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ë–•–ê–ö
        bhak_df = load_bhak_sheet(subject_file)

        # 2) –í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ë–•–ê–ö (title –±–µ—Ä—ë–º –∏–∑ oak_params –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ)
        bhak_params = {
            "–ê–õ–¢, –ï–¥./–ª": ("–ê–õ–¢", "–ï–¥./–ª"),
            "–ê–°–¢, –ï–¥./–ª": ("–ê–°–¢", "–ï–¥./–ª"),
            "–©–µ–ª–æ—á–Ω–∞—è —Ñ–æ—Å—Ñ–∞—Ç–∞–∑–∞, –ï–¥./–ª": ("–©–µ–ª–æ—á–Ω–∞—è —Ñ–æ—Å—Ñ–∞—Ç–∞–∑–∞", "–ï–¥./–ª"),
            "–ë–∏–ª–∏—Ä—É–±–∏–Ω –æ–±—â–∏–π, –º–∫–º–æ–ª—å/–ª": ("–ë–∏–ª–∏—Ä—É–±–∏–Ω –æ–±—â–∏–π", "–º–∫–º–æ–ª—å/–ª"),
            "–ö—Ä–µ–∞—Ç–∏–Ω–∏–Ω, –º–∫–º–æ–ª—å/–ª": ("–ö—Ä–µ–∞—Ç–∏–Ω–∏–Ω", "–º–∫–º–æ–ª—å/–ª"),
            "–ì–ª—é–∫–æ–∑–∞, –º–º–æ–ª—å/–ª": ("–ì–ª—é–∫–æ–∑–∞", "–º–º–æ–ª—å/–ª"),
            "–û–±—â–∏–π –±–µ–ª–æ–∫, –≥/–ª": ("–û–±—â–∏–π –±–µ–ª–æ–∫", "–≥/–ª"),
            "–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω –æ–±—â–∏–π, –º–º–æ–ª—å/–ª": ("–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω –æ–±—â–∏–π", "–º–º–æ–ª—å/–ª"),
        }
        blood_overrides = {
            "–ì–ª—é–∫–æ–∑–∞, –º–º–æ–ª—å/–ª": (3, 8, 1),
        }

        st.subheader("üß™ –î–∏–Ω–∞–º–∏–∫–∞ –±–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (IQR)")

        # 3) –¶–∏–∫–ª –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –ë–•–ê–ö
        for param, (title, unit) in bhak_params.items():
            iqr_df = compute_group_iqr(bhak_df, param)
            if iqr_df.empty:
                st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {title}")
                continue
            y_scale = blood_overrides.get(param)
            fig = plot_group_iqr(
                iqr_df,
                param_name=param,
                units=unit,
                y_scale = y_scale
            )
            st.markdown(f"#### {title}, {unit}")
            st.pyplot(fig)
            plt.close(fig)
    # üìà –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ë–•–ê–ö)
    if st.checkbox("üìà –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ë–•–ê–ö)", key="bhak_individual"):
        from viz import plot_individual_changes
        for param, (title, unit) in bhak_params.items():
            fig = plot_individual_changes(
                bhak_df,
                param,
                title=title,
                units=unit
            )
            st.markdown(f"#### {title} {unit}")
            st.pyplot(fig)
            plt.close(fig)

    if enable_oam and subject_file:
        from blood_analysis import load_oam_sheet
        from stat_tools import compute_group_iqr
        from viz import plot_group_iqr

        # 1) –ß–∏—Ç–∞–µ–º –ª–∏—Å—Ç –û–ê–ú
        oam_df = load_oam_sheet(subject_file)

        # 2) –°–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –û–ê–ú: key = —Ç–æ—á–Ω–æ–µ –∏–º—è –∫–æ–ª–æ–Ω–∫–∏, value = (–∑–∞–≥–æ–ª–æ–≤–æ–∫, –µ–¥–∏–Ω–∏—Ü—ã)
        oam_params = {
            "pH": ("pH", ""),
            "–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å, –≥/–º–ª": ("–£–¥–µ–ª—å–Ω–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å", "–≥/–º–ª"),
            "–ë–µ–ª–æ–∫, –≥/–ª": ("–ë–µ–ª–æ–∫", "–≥/–ª"),
            "–ì–ª—é–∫–æ–∑–∞, –º–º–æ–ª—å/–ª": ("–ì–ª—é–∫–æ–∑–∞", "–º–º–æ–ª—å/–ª"),
            "–õ–µ–π–∫–æ—Ü–∏—Ç—ã, –≤ –ø/–∑—Ä.": ("–õ–µ–π–∫–æ—Ü–∏—Ç—ã", "–≤ –ø/–∑—Ä."),
            "–≠—Ä–∏—Ç—Ä–æ—Ü–∏—Ç—ã, –≤ –ø/–∑—Ä.": ("–≠—Ä–∏—Ç—Ä–æ—Ü–∏—Ç—ã", "–≤ –ø/–∑—Ä."),
        }
        urine_overrides = {
            "–ì–ª—é–∫–æ–∑–∞, –º–º–æ–ª—å/–ª": (0, 0.2, 0.05),
        }
        st.subheader("üßª –î–∏–Ω–∞–º–∏–∫–∞ –æ–±—â–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –º–æ—á–∏ (IQR)")

        # 3) –¶–∏–∫–ª –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –û–ê–ú
        for param, (title, unit) in oam_params.items():
            iqr_df = compute_group_iqr(oam_df, param)
            if iqr_df.empty:
                st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {title}")
                continue
            y_scale = urine_overrides.get(param)
            fig = plot_group_iqr(
                iqr_df,
                param_name=param,
                units=unit,
                y_scale = y_scale
            )
            st.markdown(f"#### {title} {unit}")
            st.pyplot(fig)
            plt.close(fig)
    # üìà –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–û–ê–ú)
    if st.checkbox("üìà –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–û–ê–ú)", key="oam_individual"):
        from viz import plot_individual_changes
        for param, (title, unit) in oam_params.items():
            fig = plot_individual_changes(
                oam_df,
                param,
                title=title,
                units=unit
            )
            st.markdown(f"#### {title} {unit}")
            st.pyplot(fig)
            plt.close(fig)

    # —Å–ª–æ–≤–∞—Ä—å: ‚Äú—Å—ã—Ä–æ–π‚Äù –∫–æ–ª–æ–Ω–∫–∞ ‚Üí (–∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞, –µ–¥–∏–Ω–∏—Ü–∞)
    vitals_params = {
        "–ê–î —Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ, –º–º —Ä—Ç. —Å—Ç.": ("–ê–î —Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ", "–º–º —Ä—Ç. —Å—Ç."),
        "–ê–î –¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ, –º–º —Ä—Ç. —Å—Ç.": ("–ê–î –¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ", "–º–º —Ä—Ç. —Å—Ç."),
        "–ß–°–°, —É–¥/–º–∏–Ω": ("–ß–°–°", "—É–¥/–º–∏–Ω"),
        "–ß–î–î, –≤ –º–∏–Ω": ("–ß–î–î", "–≤ –º–∏–Ω"),
        "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ–ª–∞, ¬∞C": ("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ–ª–∞", "¬∞C"),
    }
    st.markdown("### üìà –î–∏–Ω–∞–º–∏–∫–∞ –≤–∏—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
    if st.checkbox("üìà –î–∏–Ω–∞–º–∏–∫–∞ –≤–∏—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π (PK)", key="vitals_dyn"):
        vitals_df = load_vitals_sheet(subject_file)
        stage_order = load_stage_order(subject_file)
        # 7 –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫, –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ –≤ –ª–∏—Å—Ç–µ Excel
        stage_order = [
            "–ø—Ä–∏ –≥–æ—Å–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏",
            "—á–µ—Ä–µ–∑ 1 —á –ø–æ—Å–ª–µ –ø—Ä–∏–µ–º–∞",
            "—á–µ—Ä–µ–∑ 3 —á –ø–æ—Å–ª–µ –ø—Ä–∏–µ–º–∞",
            "—á–µ—Ä–µ–∑ 7 —á –ø–æ—Å–ª–µ –ø—Ä–∏–µ–º–∞",
            "—á–µ—Ä–µ–∑ 12 —á –ø–æ—Å–ª–µ –ø—Ä–∏–µ–º–∞",
            "—á–µ—Ä–µ–∑ 24 —á –ø–æ—Å–ª–µ –ø—Ä–∏–µ–º–∞",
        ]


        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã Screening –µ—Å—Ç—å
        if "–°–∫—Ä–∏–Ω–∏–Ω–≥" not in vitals_df["–≠—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"].values:
            st.error("–í –≤–∏—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç Screening ‚Äî –ø—Ä–æ–≤–µ—Ä—å, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—à—å –ª–∏—Å—Ç.")
            st.stop()

        # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ ‚Äî —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ:
        #st.write("üîç –ö–æ–ª–æ–Ω–∫–∏ vitals_df:", vitals_df.columns.tolist())

        for param_col, (title, unit) in vitals_params.items():
            iqr_df = compute_vitals_iqr(vitals_df, param_col)
            if iqr_df.empty:
                st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {title}")
                continue
            st.markdown(f"### {title} ({unit})")
            fig = plot_vitals_dynamics(
                iqr_df,
                title=title,
                unit=unit,
                param_col=param_col,
                stage_order=stage_order
            )
            st.pyplot(fig)
            plt.close(fig)
    # —Ä–∞–¥–∏–∞–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
    st.markdown("### üì° –†–∞–¥–∞—Ä-–¥–∏–∞–≥—Ä–∞–º–º—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ AUC‚ÇÄ‚Äìt –∏ Cmax")

    if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–¥–∞—Ä–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –¥–ª—è AUC‚ÇÄ‚Äìt –∏ Cmax"):
        fig = radar_plot(
            pivot,
            test_label=test_name,
            ref_label=ref_name,
            dose_test=dose_test,
            dose_ref=dose_ref,
        )
        st.pyplot(fig)
        plt.close(fig)
        # 3) –ó–∞–∫–ª—é—á–µ–Ω–∏—è –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º
    from blood_analysis import extract_individual_lab  # –¥–ª—è –ø–∞—Ä ¬´–¥–æ/–ø–æ—Å–ª–µ¬ª :contentReference[oaicite:1]{index=1}
    import numpy as np
    st.markdown("### üìã –ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –ø–æ –∞–Ω–∞–ª–∏–∑–∞–º")
    if st.checkbox("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –±–∏–æ—Ö–∏–º–∏–∏ –∫—Ä–æ–≤–∏"):
        st.subheader("üìã –ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –±–∏–æ—Ö–∏–º–∏–∏ –∫—Ä–æ–≤–∏")

        for param_col, (title, unit) in bhak_params.items():
            # 1) –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞—Ä—ã ‚Äú–¥–æ/–ø–æ—Å–ª–µ‚Äù (—Å–∫—Ä–∏–Ω–∏–Ω–≥ ‚Üí Period 2 end)
            try:
                pair = extract_individual_lab(bhak_df, param_col)
            except KeyError as e:
                st.warning(f"–ü–∞—Ä–∞–º–µ—Ç—Ä ¬´{title}¬ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö: {e}")
                continue
            if pair.empty:
                st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö ¬´–¥–æ/–ø–æ—Å–ª–µ¬ª –¥–ª—è {title}")
                continue

            # 2) –ø–æ–º–µ—Ç–∏—Ç—å, —á—Ç–æ –≤ P1 –∫–∞–∂–¥—ã–π —Å—É–±—ä–µ–∫—Ç –ø–æ–ª—É—á–∞–ª Test –∏–ª–∏ Ref –ø–æ rand_dict
            pair = pair.assign(
                Sequence=pair["‚Ññ –ø/–ø"].map(rand_dict),  # rand_dict: {1:"TR",2:"RT",‚Ä¶}
            )
            pair["treatment"] = pair["Sequence"].map(
                lambda seq: "Test" if seq == "TR" else ("Ref" if seq == "RT" else None)
            )
            pair = pair.dropna(subset=["treatment"])  # –æ—Ç–∫–∏–Ω—É—Ç—å –Ω–µ–ø–æ–º–µ—á–µ–Ω–Ω—ã–µ

            # 3) —Ä–∞—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–µ ‚Äúbefore‚Äù –∏ ‚Äúafter‚Äù –ø–æ treatment-–≥—Ä—É–ø–ø–∞–º
            grp_df = (
                pair
                .groupby("treatment")[["before", "after"]]
                .mean()
                .reset_index()
            )
            # —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–±–µ –≥—Ä—É–ø–ø—ã –µ—Å—Ç—å
            if not set(grp_df["treatment"]) >= {"Test", "Ref"}:
                st.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥—Ä—É–ø–ø–∞–º –¥–ª—è {title}")
                continue

            # 4) –¥–æ—Å—Ç–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –∏ –≤—ã—á–∏—Å–ª–∏—Ç—å %-–∏–∑–º–µ–Ω–µ–Ω–∏–µ
            row_test = grp_df.loc[grp_df["treatment"] == "Test"].iloc[0]
            row_ref = grp_df.loc[grp_df["treatment"] == "Ref"].iloc[0]


            def pct(b, a):
                return (a - b) / b * 100 if b else np.nan


            pct_test = pct(row_test["before"], row_test["after"])
            pct_ref = pct(row_ref["before"], row_ref["after"])

            verb_test = "–ø–æ–≤—ã—à–µ–Ω–∏–µ" if pct_test > 0 else "—Å–Ω–∏–∂–µ–Ω–∏–µ"
            verb_ref = "–ø–æ–≤—ã—à–µ–Ω–∏–µ" if pct_ref > 0 else "—Å–Ω–∏–∂–µ–Ω–∏–µ"

            # 5) –≤—ã–≤–µ—Å—Ç–∏ Markdown
            st.markdown(f"#### {title}, {unit}")
            st.markdown("**a) –ø–æ—Å–ª–µ –ø—Ä–∏—ë–º–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞:**")
            st.markdown(f"- {verb_test} —É—Ä–æ–≤–Ω—è {title} (–Ω–∞ {abs(pct_test):.0f}%);")
            st.markdown("**–±) –ø–æ—Å–ª–µ –ø—Ä–∏—ë–º–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Ç–Ω–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞:**")
            st.markdown(f"- {verb_ref} —É—Ä–æ–≤–Ω—è {title} (–Ω–∞ {abs(pct_ref):.0f}%);")

    #---------------------------------------------------------------------------------
    if st.checkbox("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –û–ê–ö", key="oak_conclusion"):
        st.subheader("üìã –ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –æ–±—â–µ–º—É –∞–Ω–∞–ª–∏–∑—É –∫—Ä–æ–≤–∏")

        for param_col, (title, unit) in oak_params.items():
            # 1) –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—ã ¬´–¥–æ/–ø–æ—Å–ª–µ¬ª (—Å–∫—Ä–∏–Ω–∏–Ω–≥ ‚Üí Period 2)
            try:
                pair = extract_individual_lab(oak_df, param_col)
            except KeyError:
                st.warning(f"–ü–∞—Ä–∞–º–µ—Ç—Ä ¬´{title}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –û–ê–ö")
                continue
            if pair.empty:
                st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö ¬´–¥–æ/–ø–æ—Å–ª–µ¬ª –¥–ª—è {title}")
                continue

            # 2) –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—ë–º Sequence
            pair = pair.assign(
                Sequence=pair["‚Ññ –ø/–ø"].map(rand_dict)
            )
            # 3) –ê –ø–æ—Ç–æ–º –Ω–∞ –µ—ë –æ—Å–Ω–æ–≤–µ ‚Äî treatment
            pair = pair.assign(
                treatment=pair["Sequence"].map(lambda s: "Test" if s == "TR" else ("Ref" if s == "RT" else None))
            ).dropna(subset=["treatment"])

            # 4) –°—Ä–µ–¥–Ω–∏–µ before/after –ø–æ treatment-–≥—Ä—É–ø–ø–∞–º
            grp = (
                pair
                .groupby("treatment")[["before", "after"]]
                .mean()
                .reset_index()
            )
            if set(grp["treatment"]) < {"Test", "Ref"}:
                st.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥—Ä—É–ø–ø–∞–º –¥–ª—è {title}")
                continue

            # 5) –†–∞—Å—á—ë—Ç %-–∏–∑–º–µ–Ω–µ–Ω–∏—è
            row_t = grp.loc[grp["treatment"] == "Test"].iloc[0]
            row_r = grp.loc[grp["treatment"] == "Ref"].iloc[0]
            pct = lambda b, a: (a - b) / b * 100 if b else np.nan
            p_t, p_r = pct(row_t["before"], row_t["after"]), pct(row_r["before"], row_r["after"])
            verb = lambda x: "–ø–æ–≤—ã—à–µ–Ω–∏–µ" if x > 0 else "—Å–Ω–∏–∂–µ–Ω–∏–µ"

            # 6) –í—ã–≤–æ–¥
            st.markdown(f"#### {title}, {unit}")
            st.markdown("**a) –ø–æ—Å–ª–µ –ø—Ä–∏—ë–º–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞:**")
            st.markdown(f"- {verb(p_t)} —É—Ä–æ–≤–Ω—è {title} (–Ω–∞ {abs(p_t):.0f}%);")
            st.markdown("**–±) –ø–æ—Å–ª–µ –ø—Ä–∏—ë–º–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Ç–Ω–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞:**")
            st.markdown(f"- {verb(p_r)} —É—Ä–æ–≤–Ω—è {title} (–Ω–∞ {abs(p_r):.0f}%);")

    # ‚Ä¶ –≤–Ω—É—Ç—Ä–∏ if enable_oam and subject_file: ‚Ä¶

    if st.checkbox("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –û–ê–ú", key="oam_conclusion"):
        st.subheader("üìã –ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –æ–±—â–µ–º—É –∞–Ω–∞–ª–∏–∑—É –º–æ—á–∏")

        for param_col, (title, unit) in oam_params.items():
            try:
                pair = extract_individual_lab(oam_df, param_col)
            except KeyError:
                st.warning(f"–ü–∞—Ä–∞–º–µ—Ç—Ä ¬´{title}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –û–ê–ú")
                continue
            if pair.empty:
                st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö ¬´–¥–æ/–ø–æ—Å–ª–µ¬ª –¥–ª—è {title}")
                continue

            pair = pair.assign(
                Sequence=pair["‚Ññ –ø/–ø"].map(rand_dict)
            ).assign(
                treatment=lambda df: df["Sequence"].map(
                    lambda s: "Test" if s == "TR" else ("Ref" if s == "RT" else None))
            ).dropna(subset=["treatment"])

            grp = (
                pair
                .groupby("treatment")[["before", "after"]]
                .mean()
                .reset_index()
            )
            if set(grp["treatment"]) < {"Test", "Ref"}:
                st.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥—Ä—É–ø–ø–∞–º –¥–ª—è {title}")
                continue

            row_t = grp.loc[grp["treatment"] == "Test"].iloc[0]
            row_r = grp.loc[grp["treatment"] == "Ref"].iloc[0]
            pct = lambda b, a: (a - b) / b * 100 if b else np.nan
            p_t, p_r = pct(row_t["before"], row_t["after"]), pct(row_r["before"], row_r["after"])
            verb = lambda x: "–ø–æ–≤—ã—à–µ–Ω–∏–µ" if x > 0 else "—Å–Ω–∏–∂–µ–Ω–∏–µ"

            st.markdown(f"#### {title}, {unit}")
            st.markdown("**a) –ø–æ—Å–ª–µ –ø—Ä–∏—ë–º–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞:**")
            st.markdown(f"- {verb(p_t)} —É—Ä–æ–≤–Ω—è {title} (–Ω–∞ {abs(p_t):.0f}%);")
            st.markdown("**–±) –ø–æ—Å–ª–µ –ø—Ä–∏—ë–º–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Ç–Ω–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞:**")
            st.markdown(f"- {verb(p_r)} —É—Ä–æ–≤–Ω—è {title} (–Ω–∞ {abs(p_r):.0f}%);")
#-------------------------------------------------------------------------------------
    st.markdown("---")
    st.subheader("üìÑ –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—á—ë—Ç–∞")

    if selected_table == "üìë GMR / CI / CV —Ç–∞–±–ª–∏—Ü–∞":
        st.dataframe(report_df)

    elif selected_table == "üìä ANOVA –ø–æ Cmax":
        st.dataframe(anova_cmax)

    elif selected_table == "üìä ANOVA –ø–æ AUC‚ÇÄ‚Äìt":
        st.dataframe(anova_auc)

    elif selected_table == "üìä ANOVA –ø–æ AUC‚ÇÄ‚Äì‚àû":
        st.dataframe(anova_aucinf)
    elif selected_table == "üìã –¢–∞–±–ª–∏—Ü–∞ PK –ø–æ –¥–æ–±—Ä–æ–≤–æ–ª—å—Ü–∞–º":
        st.dataframe(pivot)
    elif selected_table == "üìë –û–±–æ–±—â—ë–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –§–ö-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤":
        st.markdown("### üìÑ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤ Word")

        doc = Document()
        doc.add_heading("–¢–∞–±–ª–∏—Ü–∞ ‚Äì –û–±–æ–±—â—ë–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏–∫–∏", level=1)

        # –ó–∞–≥–æ–ª–æ–≤–æ—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        table = doc.add_table(rows=6, cols=3)
        table.style = 'Table Grid'

        # –Ø—á–µ–π–∫–∏
        table.cell(0, 0).text = "–ü–∞—Ä–∞–º–µ—Ç—Ä —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏–∫–∏"
        table.cell(0, 1).text = test_name
        table.cell(0, 2).text = ref_name

        table.cell(1, 0).text = "–ê–∫—Ç–∏–≤–Ω–æ–µ –≤–µ—â–µ—Å—Ç–≤–æ ‚Äì ..."  # —Ç—ã —Å–∞–º –∑–∞–º–µ–Ω–∏—à—å –≤—Ä—É—á–Ω—É—é
        table.cell(1, 1).text = ""
        table.cell(1, 2).text = ""

        n_test = df[df["Treatment"] == "Test"]["Subject"].nunique()
        n_ref = df[df["Treatment"] == "Ref"]["Subject"].nunique()

        table.cell(2, 0).text = "n"
        table.cell(2, 1).text = str(n_test)
        table.cell(2, 2).text = str(n_ref)


        # –°—Ä–µ–¥–Ω–µ–µ ¬± SD
        def param_mean_sd(param):
            m_test = pivot[f"{param}_Test"].mean()
            sd_test = pivot[f"{param}_Test"].std()
            m_ref = pivot[f"{param}_Ref"].mean()
            sd_ref = pivot[f"{param}_Ref"].std()
            return m_test, sd_test, m_ref, sd_ref


        rows = [
            ("Cmax, –Ω–≥/–º–ª", "Cmax"),
            ("AUC(0‚Äìt), –Ω–≥¬∑—á/–º–ª", "AUC0-t"),
            ("AUC(0‚Äì‚àû), –Ω–≥¬∑—á/–º–ª", "AUC0-inf")
        ]

        for i, (label, param_col) in enumerate(rows):
            m_test, sd_test, m_ref, sd_ref = param_mean_sd(param_col)
            table.cell(i + 3, 0).text = label
            table.cell(i + 3, 1).text = f"{m_test:.0f} ({sd_test:.0f})"
            table.cell(i + 3, 2).text = f"{m_ref:.0f} ({sd_ref:.0f})"

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        buf = io.BytesIO()
        doc.save(buf)
        buf.seek(0)

        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å DOCX",
            data=buf,
            file_name="–æ–±–æ–±—â–µ–Ω–Ω—ã–µ_–§–ö_–ø–∞—Ä–∞–º–µ—Ç—Ä—ã.docx",
            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        )
    elif selected_table == "üìë –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏–∫–∏":
        st.markdown("### üìÑ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤ Word")

        doc = Document()
        doc.add_heading("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏–∫–∏", level=1)

        table = doc.add_table(rows=8, cols=4)
        table.style = 'Table Grid'

        table.cell(0, 0).text = "–ü–∞—Ä–∞–º–µ—Ç—Ä"
        table.cell(0, 1).text = "–ï–¥."
        table.cell(0, 2).text = test_name
        table.cell(0, 3).text = ref_name

        rows = [
            ("Tmax", "—á", True),
            ("T1/2", "—á", False),
            ("Kel", "—á‚Åª¬π", False),
            ("MRT", "—á", False),
            ("Vd", "–ª", False),
            ("CL", "–ª/—á", False),
            ("Tlag", "—á", True),
        ]

        for i, (param, unit, is_median) in enumerate(rows):
            table.cell(i + 1, 0).text = param
            table.cell(i + 1, 1).text = unit

            if is_median:
                q1_test = pivot[f"{param}_Test"].quantile(0.25)
                q3_test = pivot[f"{param}_Test"].quantile(0.75)
                med_test = pivot[f"{param}_Test"].median()
                test_val = f"{med_test:.2f} ({q1_test:.2f}-{q3_test:.2f})"

                q1_ref = pivot[f"{param}_Ref"].quantile(0.25)
                q3_ref = pivot[f"{param}_Ref"].quantile(0.75)
                med_ref = pivot[f"{param}_Ref"].median()
                ref_val = f"{med_ref:.2f} ({q1_ref:.2f}-{q3_ref:.2f})"
            else:
                mean_test = pivot[f"{param}_Test"].mean()
                std_test = pivot[f"{param}_Test"].std()
                test_val = f"{mean_test:.1f} ({std_test:.1f})"

                mean_ref = pivot[f"{param}_Ref"].mean()
                std_ref = pivot[f"{param}_Ref"].std()
                ref_val = f"{mean_ref:.1f} ({std_ref:.1f})"

            table.cell(i + 1, 2).text = test_val
            table.cell(i + 1, 3).text = ref_val

        buf = io.BytesIO()
        doc.save(buf)
        buf.seek(0)

        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å DOCX",
            data=buf,
            file_name="–¥–æ–ø_–§–ö_–ø–∞—Ä–∞–º–µ—Ç—Ä—ã.docx",
            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        )
    elif selected_table == "üìÑ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è PK (Test + Ref)":
        st.markdown("### üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")



        paths = export_be_tables(
            pk_table,
            pivot,
            test_name=test_name,
            ref_name=ref_name,
            substance=substance,
            dose_test=dose_test,
            dose_ref=dose_ref,
        )

        output_path = paths["individual_pk"]

        with open(output_path, "rb") as f:
            st.download_button(
                "üì• –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É (Test + Ref)",
                f,
                file_name="–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ_PK_—Ç–∞–±–ª–∏—Ü—ã.docx",
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            )
    elif selected_table == "üìÑ –û—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø–ª–æ—â–∞–¥—å AUC (Test + Ref)":
        st.markdown("### üìÑ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤ Word")

        paths = export_be_tables(
            pk_table,
            pivot,
            test_name=test_name,
            ref_name=ref_name,
            substance=substance,
            dose_test=dose_test,
            dose_ref=dose_ref,
        )
        output_path = paths["auc_residual"]

        with open(output_path, "rb") as f:
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å DOCX",
                data=f,
                file_name="AUC_residual_tables.docx",
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            )
    elif selected_table == "üìÑ ln(PK) –∑–Ω–∞—á–µ–Ω–∏—è: Test + Ref":
        st.markdown("### üìÑ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ Word")

        paths = export_be_tables(
            pk_table,
            pivot,
            test_name=test_name,
            ref_name=ref_name,
            substance=substance,
            dose_test=dose_test,
            dose_ref=dose_ref,
        )

        output_path = paths["ln_pk"]

        with open(output_path, "rb") as f:
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å DOCX",
                data=f,
                file_name="ln_PK_values.docx",
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            )
    elif selected_table == "üìÑ ANOVA –ª–æ–≥-–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ (SAS-–æ—Ç—á—ë—Ç)":
        st.markdown("### üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ANOVA-–æ—Ç—á—ë—Ç–∞ (SAS-–ø–æ–¥–æ–±–Ω—ã–π —Å—Ç–∏–ª—å)")

        paths = export_be_tables(
            pk_table,
            pivot,
            test_name=test_name,
            ref_name=ref_name,
            substance=substance,
            dose_test=dose_test,
            dose_ref=dose_ref,
        )
        output_path = paths["anova_report"]

        with open(output_path, "rb") as f:
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç (ANOVA SAS-—Å—Ç–∏–ª—å)",
                data=f,
                file_name="ANOVA_SAS_Report.docx",
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            )

    elif selected_table == "üìë –û—Å—Ç–∞—Ç–æ—á–Ω–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è –∏ CI –ª–æ–≥-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤":
        st.markdown("### üìÑ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤ Word")

        paths = export_be_tables(
            pk_table,
            pivot,
            test_name=test_name,
            ref_name=ref_name,
            substance=substance,
            dose_test=dose_test,
            dose_ref=dose_ref,
        )
        output_path = paths["log_ci"]
        with open(output_path, "rb") as f:
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å DOCX",
                data=f,
                file_name="log_CI_tables.docx",
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            )
    if selected_outlier_plot.startswith("studentized residuals:"):
        import re

        if " ‚Äì " in selected_outlier_plot or " - " in selected_outlier_plot:
            # üéØ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–∑–Ω–æ—Å—Ç–∏: Test - Ref
            pattern = re.search(r"ln\((.+?)_T\) ‚Äì ln\((.+?)_R\)", selected_outlier_plot)
            if pattern:
                # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –∏–º–µ–Ω–∞ ‚Üí –≤ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
                param_label = pattern.group(1)
                param_lookup = {
                    "Cmax": "Cmax",
                    "AUC‚ÇÄ‚Äìt": "AUC0-t",
                    "AUC‚ÇÄ‚Äì‚àû": "AUC0-inf",
                    "AUC0‚Äìt": "AUC0-t",  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                    "AUC0‚Äì‚àû": "AUC0-inf"
                }
                param = param_lookup.get(param_label, param_label)

                fig = studentized_residuals_plot(pk_table, param=param, substance=substance)
                st.pyplot(fig)
                plt.close(fig)
        else:
            # üéØ –ì—Ä–∞—Ñ–∏–∫ –ø–æ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ: Test –∏–ª–∏ Ref
            pattern = re.search(r"ln\((.+?)_(T|R)\)", selected_outlier_plot)
            if pattern:
                # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –∏–º–µ–Ω–∞ ‚Üí –≤ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
                param_label = pattern.group(1)
                param_lookup = {
                    "Cmax": "Cmax",
                    "AUC‚ÇÄ‚Äìt": "AUC0-t",
                    "AUC‚ÇÄ‚Äì‚àû": "AUC0-inf",
                    "AUC0‚Äìt": "AUC0-t",  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                    "AUC0‚Äì‚àû": "AUC0-inf"
                }
                param = param_lookup.get(param_label, param_label)

                group = "Test" if pattern.group(2) == "T" else "Ref"
                fig = studentized_group_plot(pk_table, param=param, group=group, substance=substance)
                st.pyplot(fig)
                plt.close(fig)


    elif selected_table == "üìä –¢–∞–±–ª–∏—Ü–∞: –ö—Ä–∏—Ç–µ—Ä–∏–∏ –±–∏–æ—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏ (GMR, CI, CV)":

        st.markdown("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –±–∏–æ—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏")

        output_path = export_be_result(
            gmr_list=gmr_list,
            ci_low_list=ci_low_list,
            ci_up_list=ci_up_list,
            cv_list=cv_list,
        )

        with open(output_path, "rb") as f:

            st.download_button(

                label="üì• –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤ Word",

                data=f,

                file_name="be_equivalence_table.docx",

                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"

            )
    elif selected_table == "üìä –¢–∞–±–ª–∏—Ü–∞: –ê–Ω–∞–ª–∏–∑ –∞–ø–æ—Å—Ç–µ—Ä–∏–æ—Ä–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏ (Power)":
        st.markdown("### üìä –ê–ø–æ—Å—Ç–µ—Ä–∏–æ—Ä–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")

        # –∞–ø–æ—Å—Ç–µ—Ä–∏–æ—Ä–Ω—ã–π GMR –∏ 90% CI –ø–æ —Ñ–æ—Ä–º—É–ª–µ exp(mean ¬± t*SE) –∏–∑ log-diff
        # —Ä–∞—Å—á—ë—Ç CI –¥–ª—è AUC‚ÇÄ‚Äìt
        ratio_auc_t, ci_l_auc_t, ci_u_auc_t = ci_calc(pivot["log_AUC"])
        # —Ä–∞—Å—á—ë—Ç CI –¥–ª—è AUC‚ÇÄ‚Äì‚àû
        ratio_auc_inf, ci_l_auc_inf, ci_u_auc_inf = ci_calc(pivot["log_AUCinf"])
        # —Ä–∞—Å—á—ë—Ç CI –¥–ª—è Cmax
        ratio_cmax, ci_l_cmax, ci_u_cmax = ci_calc(pivot["log_Cmax"])

        # CV intra –∫–∞–∫ –¥–æ–ª—è (–Ω–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã)
        cv_auc_t = get_cv_intra_anova(pk_table, "AUC0-t") / 100
        cv_auc_inf = get_cv_intra_anova(pk_table, "AUC0-inf") / 100
        cv_cmax = get_cv_intra_anova(pk_table, "Cmax") / 100

        gmr_list_power = [ratio_auc_t, ratio_auc_inf, ratio_cmax]
        cv_list_power = [cv_auc_t, cv_auc_inf, cv_cmax]

        output_path = export_power_table(
            gmr_list=gmr_list_power,
            cv_list=cv_list_power,
            n=len(pk_table["Subject"].unique()),
        )

        with open(output_path, "rb") as f:
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –º–æ—â–Ω–æ—Å—Ç–∏ –≤ Word",
                data=f,
                file_name="power_analysis_table.docx",
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            )

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî –≥—Ä–∞—Ñ–∏–∫–∏ (–º–æ–∂–µ–º –ø–æ–∫–∞ –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—å –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å st.warning)
    else:
        st.info("üìÅ –í –¥–∞–ª—å–Ω–µ–π—à–µ–º –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —ç–∫—Å–ø–æ—Ä—Ç –≤ Word –∏ –≥—Ä–∞—Ñ–∏–∫–∏.")





